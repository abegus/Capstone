@model Capstone.ViewModels.ManageClassViewModel
@using Capstone.ViewModels

@{
    ViewBag.Title = "Class Overview";
}

<h2>@ViewBag.Title</h2>

<div>
    <h4>Class</h4>
    <hr />
    <dl class="dl-horizontal">
        <dt>
            @Html.DisplayNameFor(model => model.currentClass.Name)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.currentClass.Name)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.currentClass.SchoolName)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.currentClass.SchoolName)
        </dd>

    </dl>
    <table class="table" id="StudentTable">
        <tr>
            <th>First Name</th> <th>Last Name</th><th>Parent Email</th><th>Action</th>
        </tr>
        @foreach (var item in Model.students)
        {
            <tr>
                <td>@item.First</td><td>@item.Last</td><td>@item.Email</td>
                <td>
                    @Html.ActionLink("Edit","Edit","Students", new { Id = item.Id}, null) |
                    @Html.ActionLink("Delete", "Delete", "Students", new { Id = item.Id }, null)
                </td>
            </tr>
        }
    </table>

   
    <!--<button onclick="addRow()" id="AddField" type="button" class="btn btn-primary">AddNew</button>-->
    <!--Recreate button to do an AJAX (script) call that goes to that address, which will then reply with the information and it will create the modal window,
        and then on submit, do an ajax post and then remove the dynmically created elements.
        
        In the StudentCreate controller method, I would want to return a partial view instead.-->
    <button class="btn btn-primary">@Html.ActionLink("Add Student", "Create", "Students", new { classId = Model.currentClass.Id }, null)</button>
</div>

<br />

<div>
    <table class="table" id="QuizTable">
        <tr>
            <th>Quiz Name</th>
            <th>Quiz Description</th>
            <th>Core Standard</th>
            <th>Action</th>
        </tr>
        @foreach (var item in Model.quizzes)
        {
            <tr>
                <td>@item.Name</td>
                <td>@item.Description</td>
                <td>@item.CoreStandard.Name</td>
                <td>
                    @Html.ActionLink("Take Quiz", "Index", "Overview", new { quizId = item.Id, classId = Model.currentClass.Id }, null) |
                    @Html.ActionLink("Details", "Advanced", "Quizs", new { Id = item.Id }, null) |
                    @Html.ActionLink("Remove Quiz", "Delete", "ClassQuizs", new { quizId = item.Id, classId = Model.currentClass.Id }, null)
                </td>
            </tr>
        }
    </table>

    <!--<button class="btn btn-primary">Html.ActionLink("Add Quiz to Class", "AddQuiz", "Classes", new { classId = Model.currentClass.Id }, null)</button>-->
    <button class="btn btn-primary">@Html.ActionLink("Add Quiz to Class", "Create", "ClassQuizs", new {  classId = Model.currentClass.Id }, null)</button>
</div>

<br /><br />
<p>
    @Html.ActionLink("Edit", "Edit", new { id = Model.currentClass.Id }) |
    @Html.ActionLink("Back to List", "Index")
</p>



     

<script>
    function addRow() {
        /*document.getElementById("AddField").innerHTML = "YOU CLICKED ME!";
        var parent = document.getElementById("StudentSection");
        var node = document.createElement("div");
        var nameBox = document.createElement("textarea");
        parent.appendChild(node);
        parent.appendChild(nameBox);*/
        var table = document.getElementById("StudentTable");
        var tbody = table.firstChild();
        var row = document.createElement("tr");
        var firstTd = document.createElement("td");
        var first = firstTd.appendChild(document.createElement());
        tbody.addRow();
    }
</script>
